cargaB<--2.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
campoB<-function(pos){
posB<-0
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
posB<-0.6
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
campoB<-function(pos){
posB<-0.6
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
posB<-10
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
campoB<-function(pos){
posB<-10
cargaB<--3.5E-6
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
campoB<-function(pos){
posB<-1
cargaB<-3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
campoA<-function(pos){
posA<-0
cargaA<-2.5E-6
if(pos<posA){
resultado<--1*k*cargaA/(abs(posA)+abs(pos))^2}else{
resultado<-k*cargaA/(abs(posA)+abs(pos))^2
}
return(resultado)
}
campoB<-function(pos){
posB<-1
cargaB<-3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
campoB<-function(pos){
posB<-0.6
cargaB<-3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
campoB<-function(pos){
posB<-0.6
cargaB<--3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
campoA<-function(pos){
posA<-0
cargaA<-2.5E-6
if(pos<posA){
resultado<--1*k*cargaA/(abs(posA)+abs(pos))^2}else{
resultado<-k*cargaA/(abs(posA)+abs(pos))^2
}
return(resultado)
}
campoB<-function(pos){
posB<-0.6
cargaB<--3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$neto))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
ggplot(datos,aes(x=datos$puntos,y=datos$campoB))+geom_point()
campoA<-function(pos){
posA<-0
cargaA<-2.5E-6
if(pos<posA){
resultado<--1*k*cargaA/(abs(posA)+abs(pos))^2}else{
resultado<-k*cargaA/(abs(posA)+abs(pos))^2
}
return(resultado)
}
campoB<-function(pos){
posB<-0.6
cargaB<--3.5E-6
if(pos<posB){
resultado<--1*k*cargaB/(abs(posB)+abs(pos))^2}else{
resultado<-k*cargaB/(abs(posB)+abs(pos))^2
}
return(resultado)
}
datos<-data.frame(campoA(puntos),campoB=campoB(puntos), puntos,neto=(campoA(puntos)+campoB(puntos)))
ggplot(datos,aes(x=datos$puntos,y=datos$campoA.puntos.))+geom_point()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("NanoMethViz")
library(NanoMethViz)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
library(ggplot2)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
library(rayshader)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30, windowsize = c(800, 800))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
diamonds
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = nlevel),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
nlevel
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = F) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
library(rayrender)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = FALSE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
diamonds
diamonds[clarity==SI2]
diamonds[diamonds$clarity==SI2]
diamonds[diamonds$clarity==SI2]
diamonds[diamonds$clarity=="SI2"]
diamonds[diamonds$clarity=="SI2",]
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "B")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
diamonds
volcano
ggdiamonds = ggplot(volcano) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "B")
volcano
library(plotly)
volcano
remotes::install_github("maju116/platypus")
1
library(tidyverse)
library(keras)
library(tensorflow)
#remotes::install_github("maju116/platypus")
library(platypus)
library(magick)
library(png)
library(jpeg)
install_tensorflow()
y
install_keras()
shinyAppTemplate("myapp")
library(shiny)
shinyAppTemplate("myapp")
shiny::runTests("myapp")
library(shinytest)
install.packages("shinytest")
shiny::runTests("myapp")
shiny::runTests("myapp")
library(shiny)
ui <- fluidPage(
textInput("name", "What is your name?"),
actionButton("greet", "Greet"),
textOutput("greeting")
)
server <- function(input, output, session) {
output$greeting <- renderText({
req(input$greet)
paste0("Hello ", isolate(input$name), "!")
})
}
shinyApp(ui, server)
library(shinytest)
recordTest("testing_app/")
testApp("myshinyapp", "mytest")
testApp("app", "mytest")
setwd("~/testing_app")
testApp("app", "mytest")
testApp("myshinyapp", "mytest")
testApp("app.R", "mytest")
setwd("~/")
testApp("testing_app/", "mytest")
## Code to study the H&H model
# Load required libraries
library(deSolve)
library(ggplot2)
library(dplyr)
library(see)
install.packages("see")
Load required libraries
library(deSolve)
library(ggplot2)
library(dplyr)
library(see)
# Defining model parameters and their values
## Ena, Ek, El are ionic reversal potential for Na+, K+ and leak respectively
## C_m is the membrane capacitance
## gna, gk, gl are maximum conductance of sodium, potassium and leak respectively
## I is the applied current to the membrane(here it is set to 10 to have more than one spike)
parameters = c(Vna = 115, Vk = -12, Vl = 10.63, gna = 120, gk = 36, gl= 0.3, C = 1, I = 10)
## Set initial state
yini_2 <- c(V = -15, m = 0.052, h = 0.596, n = 0.317)
# Model equations(specified in the the following function sHH)
sHH <- function(time, y, parms) {
with(as.list(c(y, parms)), {
## Ion channels functions/Gating functions
alpha_m <- function(v) 0.1*(25-v)/(exp((25-v)/10)-1)
beta_m  <- function(v) 4*exp(-v/18)
alpha_h <- function(v) 0.07*exp(-v/20)
beta_h  <- function(v) 1/(exp((30-v)/10)+1)
alpha_n <- function(v) 0.01*(10-v)/(exp((10-v)/10)-1)
beta_n  <- function(v) 0.125*exp(-v/80)
# I <- 10*sin(0.5*time)
# I <- 10*exp( -0.125*(time - 50)^2)
## Derivatives
dV <- ( I - gna*h*(V-Vna)*m^3-gk*(V-Vk)*n^4-gl*(V-Vl))/C
dm <- alpha_m(V)*(1-m)-beta_m(V)*m
dh <- alpha_h(V)*(1-h)-beta_h(V)*h
dn <- alpha_n(V)*(1-n)-beta_n(V)*n
list(c(dV, dm, dh, dn))
})
}
# Model application
##Set integration times
time = seq(from =0, to=50, by = 0.01)
## Model integration (The model is solved using deSolve function ode, which is the default integration routine.)
## Running the model
print(system.time(
out_sHH <- ode(yini_2 , func = sHH , times = time, parms = parameters)))
#Print the summary
summary(out_sHH)
s_HH_df <- as.data.frame(out_sHH)
pv <- ggplot(s_HH_df, aes(time,V)) + geom_line(color = "white") +  theme_abyss()
pn <- ggplot(s_HH_df, aes(time,n)) + geom_line(color = "white") +  theme_abyss()
pm <- ggplot(s_HH_df, aes(time,m)) + geom_line(color = "white") +  theme_abyss()
ph <- ggplot(s_HH_df, aes(time,h)) + geom_line(color = "white") +  theme_abyss()
ggpubr::ggarrange(pv, pn, pm, ph, ncol=2, nrow =2)
ggplot(s_HH_df, aes(x = time))+
geom_line(aes(y = V/115, color ="V: Action Potential"),  lwd =1, linetype = 2)+
geom_line(aes(y =n, color = "n: Potassium Activation"), lwd = 1)+
geom_line(aes(y =m, color = "m: Sodium Activation"), lwd = 1)+
geom_line(aes(y = h, color = "h: Sodium Inactivation"), lwd = 1)+
theme_abyss()
library(gganimate)
library(ggplot2)
library(gifski)
s_HH_df <- as.data.frame(out_sHH)
graph_3 <- ggplot(s_HH_df, aes(x = time))+
geom_line(aes(y = V/115, color ="V: Action Potential"),  lwd =1, linetype = 2)+
geom_line(aes(y =n, color = "n: Potassium Activation"), lwd = 1)+
geom_line(aes(y =m, color = "m: Sodium Activation"), lwd = 1)+
geom_line(aes(y = h, color = "h: Sodium Inactivation"), lwd = 1)+
theme_abyss()
graph4.animation<- graph_3 +
transition_reveal(time) +
view_follow(fixed_y = TRUE)
animate(graph4.animation, height = 500, width = 800, fps = 90, duration = 10, start_pause = 80, end_pause = 60, res = 100)
setwd("~/primer_paquete_R")
devtools::install_github("marcocacciabue/extractoR")
devtools::install_github("marcocacciabue/extractoR")
devtools::install_github("marcocacciabue/extractoR")
BiocManager::install_github("marcocacciabue/extractoR")
BiocManager::install("marcocacciabue/extractoR")
browseVignettes("extractoR")
browseVignettes(extractoR)
?extractoR
??extractoR
?extractoR::extract_multi_gap
?extractoR::extract_seq
devtools::build()
setwd("~/GitHub/extractoR")
usethis::use_test("extract_seq")
usethis::use_test("extract_functions")
devtools::test()
devtools::test()
library(Biostrings)
data<-Biostrings::readDNAStringSet("./fasta/extractor_sample_data.fasta",format="fasta")
usethis::use_data(data, sample_fasta)
usethis::use_data(data, data)
usethis::use_data(data, data, overwrite = T)
data
readRDS("./data/data.rda")
data2<-Biostrings::readDNAStringSet("./data/data.rda",format="fasta")
data<-Biostrings::readDNAStringSet("./data/sample.fasta",format="fasta")
Biostrings:
data
data<-Biostrings::readDNAStringSet("./data/sample.fasta",format="fasta")
usethis::use_data(data, sample, overwrite = T)
readRDS("./data/sample.rda")
sample
sample.rda
data
data
usethis::use_data(data, sample2, overwrite = T)
data<-Biostrings::readDNAStringSet("./data/sample.fasta",format="fasta")
usethis::use_data(data, sample2, overwrite = T)
usethis::use_data(data, sample2.rda, overwrite = T)
usethis::use_data(data, samp, overwrite = T)
save(data)
save(data,"data.rda")
save(data,"./data/data.rda")
data<-Biostrings::readDNAStringSet("./data/sample.fasta",format="fasta")
data
usethis::use_data(data, samp, overwrite = T)
usethis::use_data(data, samp)
usethis::use_data(data, samp, overwrite = T)
data
View(data)
data
samp
# roxygen2::roxygenise('.')
devtools::check('.')
system.file("extdata", "sample.fasta", package = "readr", mustWork = TRUE)
system.file("extdata", "sample.fasta", package = "extractoR", mustWork = TRUE)
file<-system.file("extdata", "sample.fasta", package = "extractoR", mustWork = TRUE)
Biostrings::DNAStringSet(file,format="fasta")
Biostrings::DNAStringSet(file,format="fasta")
f<-Biostrings::DNAStringSet(file,format="fasta")
f<-Biostrings::readDNAStringSet(file,format="fasta")
f
# roxygen2::roxygenise('.')
devtools::check('.')
library(extractoR)
library(Biostrings)
sample_data<-readDNAStringSet("tests/testthat/example/sample.fasta",format="fasta")
extract_multi_gap(sample_data,10,30)
sample_data_reduced_10_30<-extract_multi_gap(sample_data,10,30)
Biostrings::writeXStringSet(sample_data_reduced_10_30,"sample_data_reduced_10_30")
?extractoR::
library(extractoR)
?extractoR::extract_seq
library(shiny)
# Define UI for application that plots random distributions
ui <-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to generate and plot a random distribution
server<- shinyServer(function(input, output) {
# Expression that generates a plot of the distribution. The expression
# is wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- renderPlot({
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
shinyApp(ui = ui, server = server)
usethis::use_package("shiny")
# roxygen2::roxygenise('.')
devtools::check('.')
devtools::install()
extractoR::runExample()
runApp('inst/myapp')
runApp('inst/myapp')
devtools::install()
runApp('inst/myapp')
devtools::install()
runApp('inst/myapp')
usethis::use_package("msaR")
devtools::install()
runApp('inst/myapp')
usethis::use_package("msaR")
devtools::install()
runApp('inst/myapp')
devtools::install()
runApp('inst/myapp')
devtools::install()
runApp('inst/myapp')
extractoR::runExample()
devtools::install()
extractoR::runExample()
devtools::install()
extractoR::runExample()
extractoR::runExample2()
devtools::install()
extractoR::runExample2()
devtools::install()
devtools::install()
extractoR::runExample2()
extractoR::runExample()
extractoR::runExample(myapp)
extractoR::runExample(app)
extractoR::runExample(app.R)
devtools::install()
extractoR::runExample(app.R)
extractoR::runExample()
extractoR::runExample(app.R)
extractoR::runExample("app.R")
extractoR::runExample("myapp")
extractoR::runExample('app.R')
devtools::install()
extractoR::runExample('app.R')
devtools::install()
extractoR::runExample('app.R')
extractoR::runExample()
runApp()
runApp('inst/myapp')
